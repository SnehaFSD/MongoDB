// // mongo => to start shell
// // show dbs => to show list of dbs
// // db => shows current db Name
// // use dbName => create & switch to dbName
// // use my-first-db
// //now create your collection as "products"
// // db.products.insertMany([
// //         {
// //           "id": 1,
// //           "name": "Leanne Graham",
// //           "username": "Bret",
// //           "email": "Sincere@april.biz",
// //           "address": {
// //             "street": "Kulas Light",
// //             "suite": "Apt. 556",
// //             "city": "Gwenborough",
// //             "zipcode": "92998-3874",
// //             "geo": {
// //               "lat": "-37.3159",
// //               "lng": "81.1496"
// //             }
// //           },
// //           "phone": "1-770-736-8031 x56442",
// //           "website": "hildegard.org",
// //           "company": {
// //             "name": "Romaguera-Crona",
// //             "catchPhrase": "Multi-layered client-server neural-net",
// //             "bs": "harness real-time e-markets"
// //           }
// //         },
// //         {
// //           "id": 2,
// //           "name": "Ervin Howell",
// //           "username": "Antonette",
// //           "email": "Shanna@melissa.tv",
// //           "address": {
// //             "street": "Victor Plains",
// //             "suite": "Suite 879",
// //             "city": "Wisokyburgh",
// //             "zipcode": "90566-7771",
// //             "geo": {
// //               "lat": "-43.9509",
// //               "lng": "-34.4618"
// //             }
// //           },
// //           "phone": "010-692-6593 x09125",
// //           "website": "anastasia.net",
// //           "company": {
// //             "name": "Deckow-Crist",
// //             "catchPhrase": "Proactive didactic contingency",
// //             "bs": "synergize scalable supply-chains"
// //           }
// //         },
// //         {
// //           "id": 3,
// //           "name": "Clementine Bauch",
// //           "username": "Samantha",
// //           "email": "Nathan@yesenia.net",
// //           "address": {
// //             "street": "Douglas Extension",
// //             "suite": "Suite 847",
// //             "city": "McKenziehaven",
// //             "zipcode": "59590-4157",
// //             "geo": {
// //               "lat": "-68.6102",
// //               "lng": "-47.0653"
// //             }
// //           },
// //           "phone": "1-463-123-4447",
// //           "website": "ramiro.info",
// //           "company": {
// //             "name": "Romaguera-Jacobson",
// //             "catchPhrase": "Face to face bifurcated interface",
// //             "bs": "e-enable strategic applications"
// //           }
// //         },
// //         {
// //           "id": 4,
// //           "name": "Patricia Lebsack",
// //           "username": "Karianne",
// //           "email": "Julianne.OConner@kory.org",
// //           "address": {
// //             "street": "Hoeger Mall",
// //             "suite": "Apt. 692",
// //             "city": "South Elvis",
// //             "zipcode": "53919-4257",
// //             "geo": {
// //               "lat": "29.4572",
// //               "lng": "-164.2990"
// //             }
// //           },
// //           "phone": "493-170-9623 x156",
// //           "website": "kale.biz",
// //           "company": {
// //             "name": "Robel-Corkery",
// //             "catchPhrase": "Multi-tiered zero tolerance productivity",
// //             "bs": "transition cutting-edge web services"
// //           }
// //         },
// //         {
// //           "id": 5,
// //           "name": "Chelsey Dietrich",
// //           "username": "Kamren",
// //           "email": "Lucio_Hettinger@annie.ca",
// //           "address": {
// //             "street": "Skiles Walks",
// //             "suite": "Suite 351",
// //             "city": "Roscoeview",
// //             "zipcode": "33263",
// //             "geo": {
// //               "lat": "-31.8129",
// //               "lng": "62.5342"
// //             }
// //           },
// //           "phone": "(254)954-1289",
// //           "website": "demarco.info",
// //           "company": {
// //             "name": "Keebler LLC",
// //             "catchPhrase": "User-centric fault-tolerant solution",
// //             "bs": "revolutionize end-to-end systems"
// //           }
// //         },
// //         {
// //           "id": 6,
// //           "name": "Mrs. Dennis Schulist",
// //           "username": "Leopoldo_Corkery",
// //           "email": "Karley_Dach@jasper.info",
// //           "address": {
// //             "street": "Norberto Crossing",
// //             "suite": "Apt. 950",
// //             "city": "South Christy",
// //             "zipcode": "23505-1337",
// //             "geo": {
// //               "lat": "-71.4197",
// //               "lng": "71.7478"
// //             }
// //           },
// //           "phone": "1-477-935-8478 x6430",
// //           "website": "ola.org",
// //           "company": {
// //             "name": "Considine-Lockman",
// //             "catchPhrase": "Synchronised bottom-line interface",
// //             "bs": "e-enable innovative applications"
// //           }
// //         },
// //         {
// //           "id": 7,
// //           "name": "Kurtis Weissnat",
// //           "username": "Elwyn.Skiles",
// //           "email": "Telly.Hoeger@billy.biz",
// //           "address": {
// //             "street": "Rex Trail",
// //             "suite": "Suite 280",
// //             "city": "Howemouth",
// //             "zipcode": "58804-1099",
// //             "geo": {
// //               "lat": "24.8918",
// //               "lng": "21.8984"
// //             }
// //           },
// //           "phone": "210.067.6132",
// //           "website": "elvis.io",
// //           "company": {
// //             "name": "Johns Group",
// //             "catchPhrase": "Configurable multimedia task-force",
// //             "bs": "generate enterprise e-tailers"
// //           }
// //         },
// //         {
// //           "id": 8,
// //           "name": "Nicholas Runolfsdottir V",
// //           "username": "Maxime_Nienow",
// //           "email": "Sherwood@rosamond.me",
// //           "address": {
// //             "street": "Ellsworth Summit",
// //             "suite": "Suite 729",
// //             "city": "Aliyaview",
// //             "zipcode": "45169",
// //             "geo": {
// //               "lat": "-14.3990",
// //               "lng": "-120.7677"
// //             }
// //           },
// //           "phone": "586.493.6943 x140",
// //           "website": "jacynthe.com",
// //           "company": {
// //             "name": "Abernathy Group",
// //             "catchPhrase": "Implemented secondary concept",
// //             "bs": "e-enable extensible e-tailers"
// //           }
// //         },
// //         {
// //           "id": 9,
// //           "name": "Glenna Reichert",
// //           "username": "Delphine",
// //           "email": "Chaim_McDermott@dana.io",
// //           "address": {
// //             "street": "Dayna Park",
// //             "suite": "Suite 449",
// //             "city": "Bartholomebury",
// //             "zipcode": "76495-3109",
// //             "geo": {
// //               "lat": "24.6463",
// //               "lng": "-168.8889"
// //             }
// //           },
// //           "phone": "(775)976-6794 x41206",
// //           "website": "conrad.com",
// //           "company": {
// //             "name": "Yost and Sons",
// //             "catchPhrase": "Switchable contextually-based project",
// //             "bs": "aggregate real-time technologies"
// //           }
// //         },
// //         {
// //           "id": 10,
// //           "name": "Clementina DuBuque",
// //           "username": "Moriah.Stanton",
// //           "email": "Rey.Padberg@karina.biz",
// //           "address": {
// //             "street": "Kattie Turnpike",
// //             "suite": "Suite 198",
// //             "city": "Lebsackbury",
// //             "zipcode": "31428-2261",
// //             "geo": {
// //               "lat": "-38.2386",
// //               "lng": "57.2232"
// //             }
// //           },
// //           "phone": "024-648-3804",
// //           "website": "ambrose.net",
// //           "company": {
// //             "name": "Hoeger LLC",
// //             "catchPhrase": "Centralized empowering task-force",
// //             "bs": "target end-to-end models"
// //           }
// //         }
// //       ]
// // )

// // db.products.find().pretty()// ==displays all datas in redable format like prettier in vscode
// // db.products.findMany({ id : { $gte : 4 }})

// // Projection => Include and exclude any fields

// // ==>Inclusion => 1
// // db.products.find({},{name : 1, email : 1}).pretty()

// // ==>Exclusion => 0
// // db.products.find({},{name : 0, email : 0}).pretty()

// // ==>_id Exclusion => only for _id we can use exclusion and inclusion & not for normal
// // db.products.find({},{_id : 0, name : 1, email : 1}).pretty()

// // ==>_id =>notNeeded=> cos _id is defaultyly present so, need not needed to add inclusion"1"
// // db.products.find({},{_id : 1, name : 0, email : 0}).pretty()

// // Inclusion + Exclusion ///no it doesnt work
// // db.products.find({},{name : 1, email : 1}).pretty()

// // ==> Sorting
// // => asce = 1
// // db.products.find({},{name : 1, email : 1}).sort({id : 1}).pretty()

// // => desc = -1 
// // db.products.find({},{name : 1, email : 1}).sort({id : -1}).pretty()
// // any field can be given inside for sorting, but at a time only one type of 
// // sort can be done practically

// // ==> Limit
// // db.products.find({},{name : 1, email : 1}).sort({id : -1}).limit(5).pretty()

// // => skip (It is Based on index and not Length)
// // (if skip 2 is given.. then it takes from index(0,1,2) and displays from "id : 3" and 
// // not from ("id : 2")
// // )
// // db.products.find({},{name : 1, email : 1}).sort({id : -1}).limit(5).skip(2).pretty()

// // //update
// // db.products.updateMany({},{ $set: { category : "electronics" } })

// // 1.34.21

// // //to update particular data in category 
// // db.products.updateMany({category : "electronics"},{ $set: {category : "mobiles"} })

// // db.products.updateMany({name: "Ervin Howell"},{ $set: {category : "England"} })
// // => instead of checking All, to check the above update alone use "findOne()"instead of "find()"
// // db.products.findOne({name: "Ervin Howell"}).pretty()


// // delete
// // // first to find how many product, so that we can decide to delete either one or many
// // db.products.find({id : {$gt : 4}}). pretty()
// // //here it shows 5 datas, after finding that if we give "DeleteOne" it delets the 1st occurance
// // //but if we give DeleteMany it delets all datas for "{id : {$gt : 4}}"
// // db.products.deleteMany({id : {$gt : 4}})//while deleting, do not give pretty()

// // => to find lesser than(lt)
// // db.products.find({id : {$lt : 4}}). pretty()
// // -------------------------------------------------------------------------------------------
// ==>Aggregation
// // "_id : 0" im creating my own id, instead of mongoDB auto generating it
// db.orders.insertMany(
//   [
// {_id : 0, productName : "Steel Beam", status : "new",quantity : 10},
// {_id : 1, productName : "Steel Beam", status : "urgent",quantity : 20},
// {_id : 2, productName : "Steel Beam", status : "urgent",quantity : 30},
// {_id : 3, productName : "Iron Rod", status : "new",quantity : 15},
// {_id : 4, productName : "Iron Rod", status : "urgent",quantity : 50},
// {_id : 5, productName : "Iron Rod", status : "urgent",quantity : 10},
//   ]);

//   ==>db.orders.find().pretty()

//   //match urgent products
//   =>how its done in sql
//   ---------------------
//   // select * from orders where status : "urgent"

//   //Group it based on productName and sum its quantity
//   //select sum(quantity) from orders where status: "urgent" group by productName 

// ==> how its done in mongoDB
// ---------------------------
db.orders.aggregate([
  //stage - 1 => match urgent products
  {
    $match : { status : "urgent"}
  },
  //stage - 2 => group it based on productName and sum its quantity
  {
    $group : {
      _id : "$productName",
      totalUrgentQuantity : { $sum : "$quantity" }
    }
  }
])

//Basic cursor methods => map, toArray, pretty, forEach, limit, count, sort
// cursor => pointer

var myCourser = db.orders.find({_id :  5}).pretty()

//next()
var myCourser = db.orders.find({_id : {$gt : 3}}).pretty()
while (myCourser.hasNext()){
    print(tojson(myCourser.next()))
}

//forEach()

var myCourser = db.orders.find({_id : {$gt : 2}}).pretty()
myCourser.forEach(printjson)

 ==>
var myCourser = db.orders.find()
myCourser.forEach(
    function(product){
        print(`ProductName : ${product.productName}, Quantity : ${product.quantity} `)
    }
)

==>Count
 db.orders.find().count() //o/p 6


 //toArray()
  var allOrders = db.orders.find().toArray()
  allOrders.forEach(
    function(order){
      print(`Order Id : ${order._id}, Product Name : ${order.productName}`)
    }
  )
   now when allOrders is called alone in mongoDb, it is displayed in array of object [{}] format
----------------------------------------------------------------------------------

  Map()
Eg : 1
  var ListOrders = db.orders.find().map(function (data){
    return data.productName
  })
  Eg : 2
  var ListOrders = db.orders.find().map(function (data){
    return data.quantity * 10
  })
  1.14